---
swagger: "2.0"
info:
  description: "microblogging API"
  version: "1.0.0"
  title: "microblogging API"
  contact:
    name: "RaoulAhouansou"
    email: "ahouansouraoul@gmail.com"
  license:
    name: "Raoul License"
basePath: "/api"
schemes:
- "http"
- "https"
consumes:
- "application/json"
produces:
- "application/json"
paths:
  /users/login:
    post:
      tags:
      - "User and Authentication"
      summary: "Existing user login"
      description: "Login for existing user"
      operationId: "Login"
      parameters:
      - in: "body"
        name: "body"
        description: "Credentials to use"
        required: true
        schema:
          $ref: "#/definitions/LoginUserRequest"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/UserResponse"
        "401":
          description: "Unauthorized"
        "422":
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/GenericErrorModel"
      x-swagger-router-controller: "UserAndAuthentication"
  /users:
    post:
      tags:
      - "User and Authentication"
      summary: "Register a new user"
      description: "Register a new user"
      operationId: "CreateUser"
      parameters:
      - in: "body"
        name: "body"
        description: "Details of the new user to register"
        required: true
        schema:
          $ref: "#/definitions/NewUserRequest"
      responses:
        "201":
          description: "OK"
          schema:
            $ref: "#/definitions/UserResponse"
        "422":
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/GenericErrorModel"
      x-swagger-router-controller: "UserAndAuthentication"
  /user:
    get:
      tags:
      - "User and Authentication"
      summary: "Get current user"
      description: "Gets the currently logged-in user"
      operationId: "GetCurrentUser"
      parameters: []
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/UserResponse"
        "401":
          description: "Unauthorized"
        "422":
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/GenericErrorModel"
      security:
      - Token: []
      x-swagger-router-controller: "UserAndAuthentication"
    put:
      tags:
      - "User and Authentication"
      summary: "Update current user"
      description: "Updated user information for current user"
      operationId: "UpdateCurrentUser"
      parameters:
      - in: "body"
        name: "body"
        description: "User details to update. At least **one** field is required."
        required: true
        schema:
          $ref: "#/definitions/UpdateUserRequest"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/UserResponse"
        "401":
          description: "Unauthorized"
        "422":
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/GenericErrorModel"
      security:
      - Token: []
      x-swagger-router-controller: "UserAndAuthentication"
  /profiles/{username}:
    get:
      tags:
      - "Profile"
      summary: "Get a profile"
      description: "Get a profile of a user of the system. Auth is optional"
      operationId: "GetProfileByUsername"
      parameters:
      - name: "username"
        in: "path"
        description: "Username of the profile to get"
        required: true
        type: "string"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/ProfileResponse"
        "401":
          description: "Unauthorized"
        "422":
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/GenericErrorModel"
      x-swagger-router-controller: "Profile"
  /profiles/{username}/follow:
    post:
      tags:
      - "Profile"
      summary: "Follow a user"
      description: "Follow a user by username"
      operationId: "FollowUserByUsername"
      parameters:
      - name: "username"
        in: "path"
        description: "Username of the profile you want to follow"
        required: true
        type: "string"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/ProfileResponse"
        "401":
          description: "Unauthorized"
        "422":
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/GenericErrorModel"
      security:
      - Token: []
      x-swagger-router-controller: "Profile"
    delete:
      tags:
      - "Profile"
      summary: "Unfollow a user"
      description: "Unfollow a user by username"
      operationId: "UnfollowUserByUsername"
      parameters:
      - name: "username"
        in: "path"
        description: "Username of the profile you want to unfollow"
        required: true
        type: "string"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/ProfileResponse"
        "401":
          description: "Unauthorized"
        "422":
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/GenericErrorModel"
      security:
      - Token: []
      x-swagger-router-controller: "Profile"
  /articles/feed:
    get:
      tags:
      - "Articles"
      summary: "Get recent articles from users you follow"
      description: "Get most recent articles from users you follow. Use query parameters\
        \ to limit. Auth is required"
      operationId: "GetArticlesFeed"
      parameters:
      - name: "limit"
        in: "query"
        description: "Limit number of articles returned (default is 20)"
        required: false
        type: "integer"
        default: 20
      - name: "offset"
        in: "query"
        description: "Offset/skip number of articles (default is 0)"
        required: false
        type: "integer"
        default: 0
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/MultipleArticlesResponse"
        "401":
          description: "Unauthorized"
        "422":
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/GenericErrorModel"
      security:
      - Token: []
      x-swagger-router-controller: "Articles"
  /articles:
    get:
      tags:
      - "Articles"
      summary: "Get recent articles globally"
      description: "Get most recent articles globally. Use query parameters to filter\
        \ results. Auth is optional"
      operationId: "GetArticles"
      parameters:
      - name: "tag"
        in: "query"
        description: "Filter by tag"
        required: false
        type: "string"
      - name: "author"
        in: "query"
        description: "Filter by author (username)"
        required: false
        type: "string"
      - name: "favorited"
        in: "query"
        description: "Filter by favorites of a user (username)"
        required: false
        type: "string"
      - name: "limit"
        in: "query"
        description: "Limit number of articles returned (default is 20)"
        required: false
        type: "integer"
        default: 20
      - name: "offset"
        in: "query"
        description: "Offset/skip number of articles (default is 0)"
        required: false
        type: "integer"
        default: 0
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/MultipleArticlesResponse"
        "401":
          description: "Unauthorized"
        "422":
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/GenericErrorModel"
      x-swagger-router-controller: "Articles"
    post:
      tags:
      - "Articles"
      summary: "Create an article"
      description: "Create an article. Auth is required"
      operationId: "CreateArticle"
      parameters:
      - in: "body"
        name: "article"
        description: "Article to create"
        required: true
        schema:
          $ref: "#/definitions/NewArticleRequest"
      responses:
        "201":
          description: "OK"
          schema:
            $ref: "#/definitions/SingleArticleResponse"
        "401":
          description: "Unauthorized"
        "422":
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/GenericErrorModel"
      security:
      - Token: []
      x-swagger-router-controller: "Articles"
  /articles/{slug}:
    get:
      tags:
      - "Articles"
      summary: "Get an article"
      description: "Get an article. Auth not required"
      operationId: "GetArticle"
      parameters:
      - name: "slug"
        in: "path"
        description: "Slug of the article to get"
        required: true
        type: "string"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/SingleArticleResponse"
        "422":
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/GenericErrorModel"
      x-swagger-router-controller: "Articles"
    put:
      tags:
      - "Articles"
      summary: "Update an article"
      description: "Update an article. Auth is required"
      operationId: "UpdateArticle"
      parameters:
      - name: "slug"
        in: "path"
        description: "Slug of the article to update"
        required: true
        type: "string"
      - in: "body"
        name: "article"
        description: "Article to update"
        required: true
        schema:
          $ref: "#/definitions/UpdateArticleRequest"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/SingleArticleResponse"
        "401":
          description: "Unauthorized"
        "422":
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/GenericErrorModel"
      security:
      - Token: []
      x-swagger-router-controller: "Articles"
    delete:
      tags:
      - "Articles"
      summary: "Delete an article"
      description: "Delete an article. Auth is required"
      operationId: "DeleteArticle"
      parameters:
      - name: "slug"
        in: "path"
        description: "Slug of the article to delete"
        required: true
        type: "string"
      responses:
        "200":
          description: "OK"
        "401":
          description: "Unauthorized"
        "422":
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/GenericErrorModel"
      security:
      - Token: []
      x-swagger-router-controller: "Articles"
  /articles/{slug}/comments:
    get:
      tags:
      - "Comments"
      summary: "Get comments for an article"
      description: "Get the comments for an article. Auth is optional"
      operationId: "GetArticleComments"
      parameters:
      - name: "slug"
        in: "path"
        description: "Slug of the article that you want to get comments for"
        required: true
        type: "string"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/MultipleCommentsResponse"
        "401":
          description: "Unauthorized"
        "422":
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/GenericErrorModel"
      x-swagger-router-controller: "Comments"
    post:
      tags:
      - "Comments"
      summary: "Create a comment for an article"
      description: "Create a comment for an article. Auth is required"
      operationId: "CreateArticleComment"
      parameters:
      - name: "slug"
        in: "path"
        description: "Slug of the article that you want to create a comment for"
        required: true
        type: "string"
      - in: "body"
        name: "comment"
        description: "Comment you want to create"
        required: true
        schema:
          $ref: "#/definitions/NewCommentRequest"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/SingleCommentResponse"
        "401":
          description: "Unauthorized"
        "422":
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/GenericErrorModel"
      security:
      - Token: []
      x-swagger-router-controller: "Comments"
  /articles/{slug}/comments/{id}:
    delete:
      tags:
      - "Comments"
      summary: "Delete a comment for an article"
      description: "Delete a comment for an article. Auth is required"
      operationId: "DeleteArticleComment"
      parameters:
      - name: "slug"
        in: "path"
        description: "Slug of the article that you want to delete a comment for"
        required: true
        type: "string"
      - name: "id"
        in: "path"
        description: "ID of the comment you want to delete"
        required: true
        type: "integer"
      responses:
        "200":
          description: "OK"
        "401":
          description: "Unauthorized"
        "422":
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/GenericErrorModel"
      security:
      - Token: []
      x-swagger-router-controller: "Comments"
  /articles/{slug}/favorite:
    post:
      tags:
      - "Favorites"
      summary: "Favorite an article"
      description: "Favorite an article. Auth is required"
      operationId: "CreateArticleFavorite"
      parameters:
      - name: "slug"
        in: "path"
        description: "Slug of the article that you want to favorite"
        required: true
        type: "string"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/SingleArticleResponse"
        "401":
          description: "Unauthorized"
        "422":
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/GenericErrorModel"
      security:
      - Token: []
      x-swagger-router-controller: "Favorites"
    delete:
      tags:
      - "Favorites"
      summary: "Unfavorite an article"
      description: "Unfavorite an article. Auth is required"
      operationId: "DeleteArticleFavorite"
      parameters:
      - name: "slug"
        in: "path"
        description: "Slug of the article that you want to unfavorite"
        required: true
        type: "string"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/SingleArticleResponse"
        "401":
          description: "Unauthorized"
        "422":
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/GenericErrorModel"
      security:
      - Token: []
      x-swagger-router-controller: "Favorites"
  /tags:
    get:
      summary: "Get tags"
      description: "Get tags. Auth not required"
      operationId: "tagsGET"
      parameters: []
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/TagsResponse"
        "422":
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/GenericErrorModel"
      x-swagger-router-controller: "Default"
securityDefinitions:
  Token:
    description: "For accessing the protected API resources, you must have received\
      \ a a valid JWT token after registering or logging in. This JWT token must then\
      \ be used for all protected resources by passing it in via the 'Authorization'\
      \ header.\n\nA JWT token is generated by the API by either registering via /users\
      \ or logging in via /users/login.\n\nThe following format must be in the 'Authorization'\
      \ header :\n\n    Token: xxxxxx.yyyyyyy.zzzzzz\n    \n"
    type: "apiKey"
    name: "Authorization"
    in: "header"
definitions:
  LoginUser:
    type: "object"
    required:
    - "email"
    - "password"
    properties:
      email:
        type: "string"
      password:
        type: "string"
        format: "password"
    example:
      password: "password"
      email: "email"
  LoginUserRequest:
    type: "object"
    required:
    - "user"
    properties:
      user:
        $ref: "#/definitions/LoginUser"
    example:
      user:
        password: "password"
        email: "email"
  NewUser:
    type: "object"
    required:
    - "email"
    - "password"
    - "username"
    properties:
      username:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
        format: "password"
    example:
      password: "password"
      email: "email"
      username: "username"
  NewUserRequest:
    type: "object"
    required:
    - "user"
    properties:
      user:
        $ref: "#/definitions/NewUser"
    example:
      user:
        password: "password"
        email: "email"
        username: "username"
  User:
    type: "object"
    required:
    - "bio"
    - "email"
    - "image"
    - "token"
    - "username"
    properties:
      email:
        type: "string"
      token:
        type: "string"
      username:
        type: "string"
      bio:
        type: "string"
      image:
        type: "string"
    example:
      image: "image"
      bio: "bio"
      email: "email"
      token: "token"
      username: "username"
  UserResponse:
    type: "object"
    required:
    - "user"
    properties:
      user:
        $ref: "#/definitions/User"
    example:
      user:
        image: "image"
        bio: "bio"
        email: "email"
        token: "token"
        username: "username"
  UpdateUser:
    type: "object"
    properties:
      email:
        type: "string"
      token:
        type: "string"
      username:
        type: "string"
      bio:
        type: "string"
      image:
        type: "string"
    example:
      image: "image"
      bio: "bio"
      email: "email"
      token: "token"
      username: "username"
  UpdateUserRequest:
    type: "object"
    required:
    - "user"
    properties:
      user:
        $ref: "#/definitions/UpdateUser"
    example:
      user:
        image: "image"
        bio: "bio"
        email: "email"
        token: "token"
        username: "username"
  ProfileResponse:
    type: "object"
    required:
    - "profile"
    properties:
      profile:
        $ref: "#/definitions/Profile"
    example:
      profile:
        image: "image"
        following: true
        bio: "bio"
        username: "username"
  Profile:
    type: "object"
    required:
    - "bio"
    - "following"
    - "image"
    - "username"
    properties:
      username:
        type: "string"
      bio:
        type: "string"
      image:
        type: "string"
      following:
        type: "boolean"
    example:
      image: "image"
      following: true
      bio: "bio"
      username: "username"
  Article:
    type: "object"
    required:
    - "author"
    - "body"
    - "createdAt"
    - "description"
    - "favorited"
    - "favoritesCount"
    - "slug"
    - "tagList"
    - "title"
    - "updatedAt"
    properties:
      slug:
        type: "string"
      title:
        type: "string"
      description:
        type: "string"
      body:
        type: "string"
      tagList:
        type: "array"
        items:
          type: "string"
      createdAt:
        type: "string"
        format: "date-time"
      updatedAt:
        type: "string"
        format: "date-time"
      favorited:
        type: "boolean"
      favoritesCount:
        type: "integer"
      author:
        $ref: "#/definitions/Profile"
    example:
      tagList:
      - "tagList"
      - "tagList"
      createdAt: "2000-01-23T04:56:07.000+00:00"
      author:
        image: "image"
        following: true
        bio: "bio"
        username: "username"
      description: "description"
      title: "title"
      body: "body"
      favoritesCount: 0
      slug: "slug"
      updatedAt: "2000-01-23T04:56:07.000+00:00"
      favorited: true
  SingleArticleResponse:
    type: "object"
    required:
    - "article"
    properties:
      article:
        $ref: "#/definitions/Article"
    example:
      article:
        tagList:
        - "tagList"
        - "tagList"
        createdAt: "2000-01-23T04:56:07.000+00:00"
        author:
          image: "image"
          following: true
          bio: "bio"
          username: "username"
        description: "description"
        title: "title"
        body: "body"
        favoritesCount: 0
        slug: "slug"
        updatedAt: "2000-01-23T04:56:07.000+00:00"
        favorited: true
  MultipleArticlesResponse:
    type: "object"
    required:
    - "articles"
    - "articlesCount"
    properties:
      articles:
        type: "array"
        items:
          $ref: "#/definitions/Article"
      articlesCount:
        type: "integer"
    example:
      articlesCount: 6
      articles:
      - tagList:
        - "tagList"
        - "tagList"
        createdAt: "2000-01-23T04:56:07.000+00:00"
        author:
          image: "image"
          following: true
          bio: "bio"
          username: "username"
        description: "description"
        title: "title"
        body: "body"
        favoritesCount: 0
        slug: "slug"
        updatedAt: "2000-01-23T04:56:07.000+00:00"
        favorited: true
      - tagList:
        - "tagList"
        - "tagList"
        createdAt: "2000-01-23T04:56:07.000+00:00"
        author:
          image: "image"
          following: true
          bio: "bio"
          username: "username"
        description: "description"
        title: "title"
        body: "body"
        favoritesCount: 0
        slug: "slug"
        updatedAt: "2000-01-23T04:56:07.000+00:00"
        favorited: true
  NewArticle:
    type: "object"
    required:
    - "body"
    - "description"
    - "title"
    properties:
      title:
        type: "string"
      description:
        type: "string"
      body:
        type: "string"
      tagList:
        type: "array"
        items:
          type: "string"
    example:
      tagList:
      - "tagList"
      - "tagList"
      description: "description"
      title: "title"
      body: "body"
  NewArticleRequest:
    type: "object"
    required:
    - "article"
    properties:
      article:
        $ref: "#/definitions/NewArticle"
    example:
      article:
        tagList:
        - "tagList"
        - "tagList"
        description: "description"
        title: "title"
        body: "body"
  UpdateArticle:
    type: "object"
    properties:
      title:
        type: "string"
      description:
        type: "string"
      body:
        type: "string"
    example:
      description: "description"
      title: "title"
      body: "body"
  UpdateArticleRequest:
    type: "object"
    required:
    - "article"
    properties:
      article:
        $ref: "#/definitions/UpdateArticle"
    example:
      article:
        description: "description"
        title: "title"
        body: "body"
  Comment:
    type: "object"
    required:
    - "author"
    - "body"
    - "createdAt"
    - "id"
    - "updatedAt"
    properties:
      id:
        type: "integer"
      createdAt:
        type: "string"
        format: "date-time"
      updatedAt:
        type: "string"
        format: "date-time"
      body:
        type: "string"
      author:
        $ref: "#/definitions/Profile"
    example:
      createdAt: "2000-01-23T04:56:07.000+00:00"
      author:
        image: "image"
        following: true
        bio: "bio"
        username: "username"
      id: 0
      body: "body"
      updatedAt: "2000-01-23T04:56:07.000+00:00"
  SingleCommentResponse:
    type: "object"
    required:
    - "comment"
    properties:
      comment:
        $ref: "#/definitions/Comment"
    example:
      comment:
        createdAt: "2000-01-23T04:56:07.000+00:00"
        author:
          image: "image"
          following: true
          bio: "bio"
          username: "username"
        id: 0
        body: "body"
        updatedAt: "2000-01-23T04:56:07.000+00:00"
  MultipleCommentsResponse:
    type: "object"
    required:
    - "comments"
    properties:
      comments:
        type: "array"
        items:
          $ref: "#/definitions/Comment"
    example:
      comments:
      - createdAt: "2000-01-23T04:56:07.000+00:00"
        author:
          image: "image"
          following: true
          bio: "bio"
          username: "username"
        id: 0
        body: "body"
        updatedAt: "2000-01-23T04:56:07.000+00:00"
      - createdAt: "2000-01-23T04:56:07.000+00:00"
        author:
          image: "image"
          following: true
          bio: "bio"
          username: "username"
        id: 0
        body: "body"
        updatedAt: "2000-01-23T04:56:07.000+00:00"
  NewComment:
    type: "object"
    required:
    - "body"
    properties:
      body:
        type: "string"
    example:
      body: "body"
  NewCommentRequest:
    type: "object"
    required:
    - "comment"
    properties:
      comment:
        $ref: "#/definitions/NewComment"
    example:
      comment:
        body: "body"
  TagsResponse:
    type: "object"
    required:
    - "tags"
    properties:
      tags:
        type: "array"
        items:
          type: "string"
    example:
      tags:
      - "tags"
      - "tags"
  GenericErrorModel:
    type: "object"
    required:
    - "errors"
    properties:
      errors:
        type: "object"
        properties:
          body:
            type: "array"
            items:
              type: "string"
        required:
        - "body"
